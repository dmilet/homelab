# values to pass to kafka dependency
kafka:
  # global values
  global:
    imageRegistry: "docker.io"

    # explicitly allow the override of imageRegistry,
    # so that images are not longer the ones specified by maintainers
    security:
      allowInsecureImages: true

  kraft:
    enabled: false
  # image:
  #   debug: true
  controller:
    # zookeeper mode
    replicaCount: 0
    resources:
      requests:
        cpu: 125m
        memory: 512Mi
        ephemeral-storage: 50Mi
      limits:
        cpu: 375m
        memory: 768Mi
        ephemeral-storage: 2Gi
  broker:
    replicaCount: 3
    resources:
      requests:
        cpu: 125m
        memory: 512Mi
        ephemeral-storage: 50Mi
      limits:
        cpu: 375m
        memory: 768Mi
        ephemeral-storage: 2Gi
    extraVolumes:
      - name: client-config
        configMap:
          name: client-config
    extraVolumeMounts:
      - name: client-config
        mountPath: /mnt/client-config



  metrics:
    jmx:
      enabled: false
      resources:
        requests:
          cpu: 125m
          memory: 512Mi
          ephemeral-storage: 50Mi
        limits:
          cpu: 375m
          memory: 768Mi
          ephemeral-storage: 2Gi

    serviceMonitor:
    ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.jmx.enabled` to be `true`)
    ##
      enabled: false

  zookeeper:
    ## @param zookeeper.enabled Switch to enable or disable the ZooKeeper helm chart. Must be false if you use KRaft mode.
    ##
    enabled: true
  ## @param zookeeper.replicaCount Number of ZooKeeper nodes
  ##
    replicaCount: 3
    resources:
      requests:
        cpu: 125m
        memory: 256Mi
        ephemeral-storage: 50Mi
      limits:
        cpu: 375m
        memory: 384Mi
        ephemeral-storage: 2Gi

  # listeners:
  #   external:
  #     containerPort: 9095
  #     protocol: SASL_PLAINTEXT
  #     name: EXTERNAL
  #     sslClientAuth: ""

  #   extraListeners:
  #     - name: EXT
  #       containerPort: 9093
  #       protocol: SASL_PLAINTEXT
  #       sslClientAuth: ""
  #   advertisedListeners: "CLIENT://kafka-lab-zkmode:9092,INTERNAL://kafka-lab-zkmode-broker-headless.kafka-zk.svc.cluster.local:9094,EXT://"
  #   securityProtocolMap: "CLIENT:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT,EXT:SASL_PLAINTEXT"
  #   overrideListeners: ""
  sasl:
    existingSecret: "lab-secrets"


  externalAccess:
    ## @param externalAccess.enabled Enable Kubernetes external cluster access to Kafka brokers
    ##
    enabled: true
    ## External IPs auto-discovery configuration
    ## An init container is used to auto-detect LB IPs or node ports by querying the K8s API
    ## Note: RBAC might be required
    ##
    autoDiscovery:
      ## @param externalAccess.autoDiscovery.enabled Enable using an init container to auto-detect external IPs/ports by querying the K8s API
      ##
      enabled: false
      ## Bitnami Kubectl image
      ## ref: https://hub.docker.com/r/bitnami/kubectl/tags/
      ## @param externalAccess.autoDiscovery.image.registry [default: REGISTRY_NAME] Init container auto-discovery image registry
      ## @param externalAccess.autoDiscovery.image.repository [default: REPOSITORY_NAME/kubectl] Init container auto-discovery image repository
      ## @skip externalAccess.autoDiscovery.image.tag Init container auto-discovery image tag (immutable tags are recommended)
      ## @param externalAccess.autoDiscovery.image.digest Kubectl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
      ## @param externalAccess.autoDiscovery.image.pullPolicy Init container auto-discovery image pull policy
      ## @param externalAccess.autoDiscovery.image.pullSecrets Init container auto-discovery image pull secrets
      ##
      image:
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.32.0-debian-12-r0
        digest: ""
        ## Specify a imagePullPolicy
        ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## Init Container resource requests and limits
      ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param externalAccess.autoDiscovery.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if externalAccess.autoDiscovery.resources is set (externalAccess.autoDiscovery.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param externalAccess.autoDiscovery.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Kafka provisioning containers' Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param externalAccess.autoDiscovery.containerSecurityContext.enabled Enable Kafka auto-discovery containers' Security Context
      ## @param externalAccess.autoDiscovery.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
      ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
      ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
      ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsNonRoot Set Kafka auto-discovery containers' Security Context runAsNonRoot
      ## @param externalAccess.autoDiscovery.containerSecurityContext.allowPrivilegeEscalation Set Kafka auto-discovery containers' Security Context allowPrivilegeEscalation
      ## @param externalAccess.autoDiscovery.containerSecurityContext.readOnlyRootFilesystem Set Kafka auto-discovery containers' Security Context readOnlyRootFilesystem
      ## @param externalAccess.autoDiscovery.containerSecurityContext.capabilities.drop Set Kafka auto-discovery containers' Security Context capabilities to be dropped
      ## @param externalAccess.autoDiscovery.containerSecurityContext.seccompProfile.type Set Kafka auto-discovery seccomp profile type
      ## e.g:
      ##   containerSecurityContext:
      ##     enabled: true
      ##     capabilities:
      ##       drop: ["NET_RAW"]
      ##     readOnlyRootFilesystem: true
      ##
      containerSecurityContext:
        enabled: true
        seLinuxOptions: {}
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: "RuntimeDefault"
    ## Service settings

    broker:
      ## Parameters to configure K8s service(s) used to externally access Kafka brokers
      ## Note: A new service per broker will be created
      ##
      service:
        ## @param externalAccess.broker.service.type Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP
        ##
        type: LoadBalancer
        ## @param externalAccess.broker.service.ports.external Kafka port used for external access when service type is LoadBalancer
        ##
        ports:
          external: 9095
        ## @param externalAccess.broker.service.loadBalancerClass Kubernetes Service Load Balancer class for external access when service type is LoadBalancer
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
        ##
        loadBalancerClass: ""
        ## @param externalAccess.broker.service.loadBalancerIPs Array of load balancer IPs for each Kafka broker. Length must be the same as replicaCount
        ## e.g:
        ## loadBalancerIPs:
        ##   - X.X.X.X
        ##   - Y.Y.Y.Y
        ##
        loadBalancerIPs:
          - 192.168.100.110
          - 192.168.100.111
          - 192.168.100.112
        ## @param externalAccess.broker.service.loadBalancerNames Array of load balancer Names for each Kafka broker. Length must be the same as replicaCount
        ## e.g:
        ## loadBalancerNames:
        ##   - broker1.external.example.com
        ##   - broker2.external.example.com
        ##
        loadBalancerNames:
          - kafka-lab-zkmode-ext-l4-0
          - kafka-lab-zkmode-ext-l4-1
          - kafka-lab-zkmode-ext-l4-2
        ## @param externalAccess.broker.service.loadBalancerAnnotations Array of load balancer annotations for each Kafka broker. Length must be the same as replicaCount
        ## e.g:
        ## loadBalancerAnnotations:
        ##   - external-dns.alpha.kubernetes.io/hostname: broker1.external.example.com.
        ##   - external-dns.alpha.kubernetes.io/hostname: broker2.external.example.com.
        ##
        loadBalancerAnnotations:
            - metallb.universe.tf/loadBalancerIPs: 192.168.100.110
            - metallb.universe.tf/loadBalancerIPs: 192.168.100.111
            - metallb.universe.tf/loadBalancerIPs: 192.168.100.112
        ## @param externalAccess.broker.service.loadBalancerSourceRanges Address(es) that are allowed when service is LoadBalancer
        ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
        ## e.g:
        ## loadBalancerSourceRanges:
        ## - 10.10.10.0/24
        ##
        loadBalancerSourceRanges:
          - 192.168.100.0/24
        ## @param externalAccess.broker.service.allocateLoadBalancerNodePorts Whether to allocate node ports when service type is LoadBalancer
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
        ##
        allocateLoadBalancerNodePorts: false
        ## @param externalAccess.broker.service.nodePorts Array of node ports used for each Kafka broker. Length must be the same as replicaCount
        ## e.g:
        ## nodePorts:
        ##   - 30001
        ##   - 30002
        ##
        # nodePorts:
        #   - 30001
        #   - 30002
        #   - 30003

        ## @param externalAccess.broker.service.externalIPs Use distinct service host IPs to configure Kafka external listener when service type is NodePort. Length must be the same as replicaCount
        ## e.g:
        ## externalIPs:
        ##   - X.X.X.X
        ##   - Y.Y.Y.Y
        ##
        externalIPs: []
        ## @param externalAccess.broker.service.useHostIPs Use service host IPs to configure Kafka external listener when service type is NodePort
        ##
        useHostIPs: false
        ## @param externalAccess.broker.service.usePodIPs using the MY_POD_IP address for external access.
        ##
        usePodIPs: false
        ## @param externalAccess.broker.service.domain Domain or external ip used to configure Kafka external listener when service type is NodePort or ClusterIP
        ## NodePort: If not specified, the container will try to get the kubernetes node external IP
        ## ClusterIP: Must be specified, ingress IP or domain where tcp for external ports is configured
        ##
        domain: ""
        ## @param externalAccess.broker.service.publishNotReadyAddresses Indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready
        ## ref: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
        ##
        publishNotReadyAddresses: false
        ## @param externalAccess.broker.service.labels Service labels for external access
        ##
        labels: {}
        ## @param externalAccess.broker.service.annotations Service annotations for external access
        ##
        annotations: {}
        ## @param externalAccess.broker.service.extraPorts Extra ports to expose in the Kafka external service
        ##
        extraPorts: []