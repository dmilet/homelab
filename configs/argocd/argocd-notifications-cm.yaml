apiVersion: v1
data:
  template.app-created: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{.app.metadata.name}}", "event": "app-created" }
  template.app-deleted: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "app-deleted" }
  template.app-deployed: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "template.app-deployed" }
  template.app-health-degraded: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "app-health-degraded" }
  template.app-sync-failed: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "app-sync-failed" }
  template.app-sync-running: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "template.app-sync-running" }
  template.app-sync-status-unknown: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "app-sync-status-unknown" }
  template.app-sync-succeeded: |
    webhook:
      events-aggregator:
        method: POST
        path: /
        body: |
          { "app": "{{ .app.metadata.name}}", "event": "app-sync-succeeded" }
  trigger.on-created: |
    - description: Application is created.
      oncePer: app.metadata.name
      send:
      - app-created
      when: "true"
  trigger.on-deleted: |
    - description: Application is deleted.
      oncePer: app.metadata.name
      send:
      - app-deleted
      when: app.metadata.deletionTimestamp != nil
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-deployed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
        and app.status.health.status == 'Healthy'
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  trigger.on-sync-failed: |
    - description: Application syncing has failed
      send:
      - app-sync-failed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Error',
        'Failed']
  trigger.on-sync-running: |
    - description: Application is being synced
      send:
      - app-sync-running
      when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
  trigger.on-sync-status-unknown: |
    - description: Application status is 'Unknown'
      send:
      - app-sync-status-unknown
      when: app.status.sync.status == 'Unknown'
  trigger.on-sync-succeeded: |
    - description: Application syncing has succeeded
      send:
      - app-sync-succeeded
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']

  #### Custom definitions ####
  service.webhook.events-aggregator: |
    url: http://dev-frontends-flaskapp-git-frontends-flaskapp-svc.dev:8080/
    #headers: #optional headers
    #- name: <header-name>
    #  value: <header-value>
    #basicAuth: #optional username password
    #  username: <username>
    #  password: <api-key>
    insecureSkipVerify: true
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd